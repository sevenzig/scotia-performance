
====================================
Loading svelte-check in workspace: /home/scott/Projects/scotia-performance-dev
Getting Svelte diagnostics...

/home/scott/Projects/scotia-performance-dev/src/lib/utils/clientImageUtils.js:30:43
Error: Parameter 'imageName' implicitly has an 'any' type. 
// Get responsive image sources for picture element
export function getResponsiveImageSources(imageName) {
  const basePath = `/images/optimized/${imageName}`;


/home/scott/Projects/scotia-performance-dev/src/lib/utils/cssLoader.js:15:40
Error: Type 'null' is not assignable to type 'HTMLLinkElement'. 
  // Return early if we're not in a browser context
  if (typeof document === 'undefined') return null;
  


/home/scott/Projects/scotia-performance-dev/src/lib/utils/cssLoader.js:20:3
Error: Type 'string | undefined' is not assignable to type 'string'.
  Type 'undefined' is not assignable to type 'string'. 
  link.href = href;
  link.as = preload ? 'style' : undefined;
  link.media = media;


/home/scott/Projects/scotia-performance-dev/src/lib/utils/cssLoader.js:27:12
Error: Property 'rel' does not exist on type 'GlobalEventHandlers'. 
      this.onload = null;
      this.rel = 'stylesheet';
    };


/home/scott/Projects/scotia-performance-dev/src/lib/utils/cssLoader.js:169:7
Error: 'stylesheet.parentNode' is possibly 'null'. 
      // Remove the original element
      stylesheet.parentNode.removeChild(stylesheet);
      


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:5:5
Error: Variable 'sharp' implicitly has type 'any' in some locations where its type cannot be determined. 
// Server-side dependencies
let sharp;
let fs;


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:6:5
Error: Variable 'fs' implicitly has type 'any' in some locations where its type cannot be determined. 
let sharp;
let fs;
let path;


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:7:5
Error: Variable 'path' implicitly has type 'any' in some locations where its type cannot be determined. 
let fs;
let path;
let fileURLToPath;


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:10:5
Error: Variable 'staticDir' implicitly has type 'any' in some locations where its type cannot be determined. 
let __dirname;
let staticDir;
let imagesDir;


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:11:5
Error: Variable 'imagesDir' implicitly has type 'any' in some locations where its type cannot be determined. 
let staticDir;
let imagesDir;
let optimizedDir;


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:12:5
Error: Variable 'optimizedDir' implicitly has type 'any' in some locations where its type cannot be determined. 
let imagesDir;
let optimizedDir;
let cacheFile;


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:13:5
Error: Variable 'cacheFile' implicitly has type 'any' in some locations where its type cannot be determined. 
let optimizedDir;
let cacheFile;
let imageCache = {};


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:42:11
Error: Variable 'path' implicitly has an 'any' type. 
      // Initialize paths once URL module is loaded
      if (path && fileURLToPath) {
        __dirname = path.dirname(fileURLToPath(import.meta.url));


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:62:8
Error: Variable 'fs' implicitly has an 'any' type. 
function initializeDirectory() {
  if (!fs || !path) return;
  


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:62:15
Error: Variable 'path' implicitly has an 'any' type. 
function initializeDirectory() {
  if (!fs || !path) return;
  


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:66:24
Error: Variable 'optimizedDir' implicitly has an 'any' type. 
    // Create optimized directory if it doesn't exist
    if (!fs.existsSync(optimizedDir)) {
      fs.mkdirSync(optimizedDir, { recursive: true });


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:67:20
Error: Variable 'optimizedDir' implicitly has an 'any' type. 
    if (!fs.existsSync(optimizedDir)) {
      fs.mkdirSync(optimizedDir, { recursive: true });
    }


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:72:25
Error: Variable 'cacheFile' implicitly has an 'any' type. 
    try {
      if (fs.existsSync(cacheFile)) {
        imageCache = JSON.parse(fs.readFileSync(cacheFile, 'utf8'));


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:73:49
Error: Variable 'cacheFile' implicitly has an 'any' type. 
      if (fs.existsSync(cacheFile)) {
        imageCache = JSON.parse(fs.readFileSync(cacheFile, 'utf8'));
      }


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:91:5
Error: Variable 'fs' implicitly has an 'any' type. 
  try {
    fs.writeFileSync(cacheFile, JSON.stringify(imageCache, null, 2));
  } catch (error) {


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:91:22
Error: Variable 'cacheFile' implicitly has an 'any' type. 
  try {
    fs.writeFileSync(cacheFile, JSON.stringify(imageCache, null, 2));
  } catch (error) {


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:106:8
Error: Variable 'fs' implicitly has an 'any' type. 
  
  if (!fs.existsSync(outputPath)) return true;
  


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:109:21
Error: Variable 'fs' implicitly has an 'any' type. 
  // Check cache
  const inputStat = fs.statSync(inputPath);
  const cacheEntry = imageCache[inputPath];


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:110:22
Error: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{}'.
  No index signature with a parameter of type 'string' was found on type '{}'. 
  const inputStat = fs.statSync(inputPath);
  const cacheEntry = imageCache[inputPath];
  


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:128:23
Error: Variable 'path' implicitly has an 'any' type. 
  try {
    const inputPath = path.join(imagesDir, file);
    const fileBase = path.basename(file, path.extname(file));


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:128:33
Error: Variable 'imagesDir' implicitly has an 'any' type. 
  try {
    const inputPath = path.join(imagesDir, file);
    const fileBase = path.basename(file, path.extname(file));


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:129:22
Error: Variable 'path' implicitly has an 'any' type. 
    const inputPath = path.join(imagesDir, file);
    const fileBase = path.basename(file, path.extname(file));
    const inputStat = fs.statSync(inputPath);


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:129:42
Error: Variable 'path' implicitly has an 'any' type. 
    const inputPath = path.join(imagesDir, file);
    const fileBase = path.basename(file, path.extname(file));
    const inputStat = fs.statSync(inputPath);


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:130:23
Error: Variable 'fs' implicitly has an 'any' type. 
    const fileBase = path.basename(file, path.extname(file));
    const inputStat = fs.statSync(inputPath);
    


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:133:9
Error: Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{}'. 
    // Check if source image has changed since last optimization
    if (imageCache[inputPath] && imageCache[inputPath].mtime === inputStat.mtimeMs) {
      return true; // Skip unchanged images


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:133:34
Error: Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{}'. 
    // Check if source image has changed since last optimization
    if (imageCache[inputPath] && imageCache[inputPath].mtime === inputStat.mtimeMs) {
      return true; // Skip unchanged images


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:138:28
Error: Variable 'sharp' implicitly has an 'any' type. 
    // Get image metadata
    const metadata = await sharp(inputPath).metadata();
    


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:155:28
Error: Variable 'path' implicitly has an 'any' type. 
      if (metadata.width && metadata.width > size.width) {
        const webpOutput = path.join(optimizedDir, `${fileBase}-${size.suffix}.webp`);
        const jpgOutput = path.join(optimizedDir, `${fileBase}-${size.suffix}.jpg`);


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:155:38
Error: Variable 'optimizedDir' implicitly has an 'any' type. 
      if (metadata.width && metadata.width > size.width) {
        const webpOutput = path.join(optimizedDir, `${fileBase}-${size.suffix}.webp`);
        const jpgOutput = path.join(optimizedDir, `${fileBase}-${size.suffix}.jpg`);


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:156:27
Error: Variable 'path' implicitly has an 'any' type. 
        const webpOutput = path.join(optimizedDir, `${fileBase}-${size.suffix}.webp`);
        const jpgOutput = path.join(optimizedDir, `${fileBase}-${size.suffix}.jpg`);
        


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:156:37
Error: Variable 'optimizedDir' implicitly has an 'any' type. 
        const webpOutput = path.join(optimizedDir, `${fileBase}-${size.suffix}.webp`);
        const jpgOutput = path.join(optimizedDir, `${fileBase}-${size.suffix}.jpg`);
        


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:162:25
Error: Variable 'sharp' implicitly has an 'any' type. 
        // Create WebP version - better compression
        const webpJob = sharp(inputPath)
          .resize(size.width)


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:168:24
Error: Variable 'sharp' implicitly has an 'any' type. 
        // Create fallback JPEG version - better browser support
        const jpgJob = sharp(inputPath)
          .resize(size.width)


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:178:26
Error: Variable 'path' implicitly has an 'any' type. 
    // Create original size WebP version for modern browsers if needed
    const originalWebp = path.join(optimizedDir, `${fileBase}.webp`);
    if (needsOptimization(inputPath, originalWebp)) {


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:178:36
Error: Variable 'optimizedDir' implicitly has an 'any' type. 
    // Create original size WebP version for modern browsers if needed
    const originalWebp = path.join(optimizedDir, `${fileBase}.webp`);
    if (needsOptimization(inputPath, originalWebp)) {


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:180:27
Error: Variable 'sharp' implicitly has an 'any' type. 
    if (needsOptimization(inputPath, originalWebp)) {
      const originalJob = sharp(inputPath)
        .webp({ quality: 85, effort: 6 })


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:188:23
Error: Variable 'path' implicitly has an 'any' type. 
    // Create thumbnail for lazy loading previews
    const thumbPath = path.join(optimizedDir, `${fileBase}-thumb.webp`);
    if (needsOptimization(inputPath, thumbPath)) {


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:188:33
Error: Variable 'optimizedDir' implicitly has an 'any' type. 
    // Create thumbnail for lazy loading previews
    const thumbPath = path.join(optimizedDir, `${fileBase}-thumb.webp`);
    if (needsOptimization(inputPath, thumbPath)) {


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:190:24
Error: Variable 'sharp' implicitly has an 'any' type. 
    if (needsOptimization(inputPath, thumbPath)) {
      const thumbJob = sharp(inputPath)
        .resize(20) // Tiny placeholder


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:203:5
Error: Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{}'. 
    // Update cache
    imageCache[inputPath] = { 
      mtime: inputStat.mtimeMs,


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:230:19
Error: Variable 'fs' implicitly has an 'any' type. 
    // Get all image files
    const files = fs.readdirSync(imagesDir).filter(file => {
      const ext = path.extname(file).toLowerCase();


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:230:34
Error: Variable 'imagesDir' implicitly has an 'any' type. 
    // Get all image files
    const files = fs.readdirSync(imagesDir).filter(file => {
      const ext = path.extname(file).toLowerCase();


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:230:52
Error: Parameter 'file' implicitly has an 'any' type. 
    // Get all image files
    const files = fs.readdirSync(imagesDir).filter(file => {
      const ext = path.extname(file).toLowerCase();


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:231:19
Error: Variable 'path' implicitly has an 'any' type. 
    const files = fs.readdirSync(imagesDir).filter(file => {
      const ext = path.extname(file).toLowerCase();
      return ['.jpg', '.jpeg', '.png', '.webp'].includes(ext) && !file.includes('optimized');


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:300:24
Error: Variable 'fs' implicitly has an 'any' type. 
  // Server-side version with file existence checks
  const hasOptimized = fs.existsSync(path.join(optimizedDir, `${imageName}.webp`)) || 
                     fs.existsSync(path.join(optimizedDir, `${imageName}-lg.webp`));


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:300:38
Error: Variable 'path' implicitly has an 'any' type. 
  // Server-side version with file existence checks
  const hasOptimized = fs.existsSync(path.join(optimizedDir, `${imageName}.webp`)) || 
                     fs.existsSync(path.join(optimizedDir, `${imageName}-lg.webp`));


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:300:48
Error: Variable 'optimizedDir' implicitly has an 'any' type. 
  // Server-side version with file existence checks
  const hasOptimized = fs.existsSync(path.join(optimizedDir, `${imageName}.webp`)) || 
                     fs.existsSync(path.join(optimizedDir, `${imageName}-lg.webp`));


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:301:22
Error: Variable 'fs' implicitly has an 'any' type. 
  const hasOptimized = fs.existsSync(path.join(optimizedDir, `${imageName}.webp`)) || 
                     fs.existsSync(path.join(optimizedDir, `${imageName}-lg.webp`));
  


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:301:36
Error: Variable 'path' implicitly has an 'any' type. 
  const hasOptimized = fs.existsSync(path.join(optimizedDir, `${imageName}.webp`)) || 
                     fs.existsSync(path.join(optimizedDir, `${imageName}-lg.webp`));
  


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:301:46
Error: Variable 'optimizedDir' implicitly has an 'any' type. 
  const hasOptimized = fs.existsSync(path.join(optimizedDir, `${imageName}.webp`)) || 
                     fs.existsSync(path.join(optimizedDir, `${imageName}-lg.webp`));
  


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:314:20
Error: Variable 'fs' implicitly has an 'any' type. 
  const thumbPath = `${baseDir}${imageName}-thumb.webp`;
  const hasThumb = fs.existsSync(path.join(staticDir, 'images/optimized', `${imageName}-thumb.webp`));



/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:314:34
Error: Variable 'path' implicitly has an 'any' type. 
  const thumbPath = `${baseDir}${imageName}-thumb.webp`;
  const hasThumb = fs.existsSync(path.join(staticDir, 'images/optimized', `${imageName}-thumb.webp`));



/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:314:44
Error: Variable 'staticDir' implicitly has an 'any' type. 
  const thumbPath = `${baseDir}${imageName}-thumb.webp`;
  const hasThumb = fs.existsSync(path.join(staticDir, 'images/optimized', `${imageName}-thumb.webp`));



/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:326:12
Error: Variable 'fs' implicitly has an 'any' type. 
    const filePath = src.split(' ')[0].replace(baseDir, '');
    return fs.existsSync(path.join(optimizedDir, filePath));
  }).join(', ');


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:326:26
Error: Variable 'path' implicitly has an 'any' type. 
    const filePath = src.split(' ')[0].replace(baseDir, '');
    return fs.existsSync(path.join(optimizedDir, filePath));
  }).join(', ');


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:326:36
Error: Variable 'optimizedDir' implicitly has an 'any' type. 
    const filePath = src.split(' ')[0].replace(baseDir, '');
    return fs.existsSync(path.join(optimizedDir, filePath));
  }).join(', ');


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:338:12
Error: Variable 'fs' implicitly has an 'any' type. 
    const filePath = src.split(' ')[0].replace(baseDir, '').replace('/images/', '');
    return fs.existsSync(filePath.startsWith('/') 
      ? path.join(staticDir, filePath.slice(1)) 


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:339:9
Error: Variable 'path' implicitly has an 'any' type. 
    return fs.existsSync(filePath.startsWith('/') 
      ? path.join(staticDir, filePath.slice(1)) 
      : path.join(optimizedDir, filePath));


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:339:19
Error: Variable 'staticDir' implicitly has an 'any' type. 
    return fs.existsSync(filePath.startsWith('/') 
      ? path.join(staticDir, filePath.slice(1)) 
      : path.join(optimizedDir, filePath));


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:340:9
Error: Variable 'path' implicitly has an 'any' type. 
      ? path.join(staticDir, filePath.slice(1)) 
      : path.join(optimizedDir, filePath));
  }).join(', ');


/home/scott/Projects/scotia-performance-dev/src/lib/utils/imageOptimizer.js:340:19
Error: Variable 'optimizedDir' implicitly has an 'any' type. 
      ? path.join(staticDir, filePath.slice(1)) 
      : path.join(optimizedDir, filePath));
  }).join(', ');


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:51:22
Error: Parameter 'metrics' implicitly has an 'any' type. 
  if (reportToConsole) {
    onMetric('all', (metrics) => {
      console.log('Performance Metrics:', metrics);


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:59:9
Error: Variable 'timer' implicitly has type 'any' in some locations where its type cannot be determined. 
    const allMetrics = ['fcp', 'lcp', 'fid', 'cls'];
    let timer = null;
    


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:61:22
Error: Parameter 'metrics' implicitly has an 'any' type. 
    
    onMetric('all', (metrics) => {
      // Check if we have all core metrics


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:66:29
Error: Variable 'timer' implicitly has an 'any' type. 
      // Wait a bit to make sure all metrics are stable
      if (hasAllMetrics && !timer) {
        timer = setTimeout(() => {


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:116:39
Error: Property 'fid' does not exist on type '{}'. 
      entries.forEach((entry) => {
        if (entry.startTime < metrics.fid || metrics.fid === undefined) {
          updateMetric('fid', entry.processingStart - entry.startTime);


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:116:54
Error: Property 'fid' does not exist on type '{}'. 
      entries.forEach((entry) => {
        if (entry.startTime < metrics.fid || metrics.fid === undefined) {
          updateMetric('fid', entry.processingStart - entry.startTime);


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:117:37
Error: Property 'processingStart' does not exist on type 'PerformanceEntry'. 
        if (entry.startTime < metrics.fid || metrics.fid === undefined) {
          updateMetric('fid', entry.processingStart - entry.startTime);
        }


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:131:9
Error: Variable 'sessionEntries' implicitly has type 'any[]' in some locations where its type cannot be determined. 
    let sessionValue = 0;
    let sessionEntries = [];
    let clsObserver;


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:134:27
Error: Parameter 'entries' implicitly has an 'any' type. 
    
    const entryHandler = (entries) => {
      entries.forEach((entry) => {


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:135:24
Error: Parameter 'entry' implicitly has an 'any' type. 
    const entryHandler = (entries) => {
      entries.forEach((entry) => {
        // Only count layout shifts without recent user input


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:138:37
Error: Variable 'sessionEntries' implicitly has an 'any[]' type. 
        if (!entry.hadRecentInput) {
          const firstSessionEntry = sessionEntries[0];
          const lastSessionEntry = sessionEntries[sessionEntries.length - 1];


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:139:36
Error: Variable 'sessionEntries' implicitly has an 'any[]' type. 
          const firstSessionEntry = sessionEntries[0];
          const lastSessionEntry = sessionEntries[sessionEntries.length - 1];
          


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:159:26
Error: Variable 'sessionEntries' implicitly has an 'any[]' type. 
            clsValue = sessionValue;
            clsEntries = sessionEntries;
            updateMetric('cls', clsValue);


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:188:49
Error: Property 'responseStart' does not exist on type 'PerformanceEntry'. 
    if (navigationEntries.length > 0) {
      updateMetric('ttfb', navigationEntries[0].responseStart);
    }


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:210:3
Error: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{}'.
  No index signature with a parameter of type 'string' was found on type '{}'. 
function updateMetric(name, value) {
  metrics[name] = value;
  


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:213:7
Error: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ fcp: never[]; lcp: never[]; fid: never[]; cls: never[]; ttfb: never[]; load: never[]; all: never[]; }'.
  No index signature with a parameter of type 'string' was found on type '{ fcp: never[]; lcp: never[]; fid: never[]; cls: never[]; ttfb: never[]; load: never[]; all: never[]; }'. 
  // Trigger specific metric callbacks
  if (callbacks[name]) {
    callbacks[name].forEach(callback => callback(value));


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:214:5
Error: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ fcp: never[]; lcp: never[]; fid: never[]; cls: never[]; ttfb: never[]; load: never[]; all: never[]; }'.
  No index signature with a parameter of type 'string' was found on type '{ fcp: never[]; lcp: never[]; fid: never[]; cls: never[]; ttfb: never[]; load: never[]; all: never[]; }'. 
  if (callbacks[name]) {
    callbacks[name].forEach(callback => callback(value));
  }


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:214:29
Error: Parameter 'callback' implicitly has an 'any' type. 
  if (callbacks[name]) {
    callbacks[name].forEach(callback => callback(value));
  }


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:219:39
Error: This expression is not callable.
  Type 'never' has no call signatures. 
  if (callbacks.all) {
    callbacks.all.forEach(callback => callback({...metrics}));
  }


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:230:8
Error: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ fcp: never[]; lcp: never[]; fid: never[]; cls: never[]; ttfb: never[]; load: never[]; all: never[]; }'.
  No index signature with a parameter of type 'string' was found on type '{ fcp: never[]; lcp: never[]; fid: never[]; cls: never[]; ttfb: never[]; load: never[]; all: never[]; }'. 
export function onMetric(metricName, callback) {
  if (!callbacks[metricName]) {
    console.warn(`Unknown metric: ${metricName}`);


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:235:3
Error: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ fcp: never[]; lcp: never[]; fid: never[]; cls: never[]; ttfb: never[]; load: never[]; all: never[]; }'.
  No index signature with a parameter of type 'string' was found on type '{ fcp: never[]; lcp: never[]; fid: never[]; cls: never[]; ttfb: never[]; load: never[]; all: never[]; }'. 
  
  callbacks[metricName].push(callback);
  


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:240:14
Error: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{}'.
  No index signature with a parameter of type 'string' was found on type '{}'. 
    callback({...metrics});
  } else if (metrics[metricName] !== undefined) {
    callback(metrics[metricName]);


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:241:14
Error: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{}'.
  No index signature with a parameter of type 'string' was found on type '{}'. 
  } else if (metrics[metricName] !== undefined) {
    callback(metrics[metricName]);
  }


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:246:19
Error: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ fcp: never[]; lcp: never[]; fid: never[]; cls: never[]; ttfb: never[]; load: never[]; all: never[]; }'.
  No index signature with a parameter of type 'string' was found on type '{ fcp: never[]; lcp: never[]; fid: never[]; cls: never[]; ttfb: never[]; load: never[]; all: never[]; }'. 
  return () => {
    const index = callbacks[metricName].indexOf(callback);
    if (index !== -1) {


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:248:7
Error: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ fcp: never[]; lcp: never[]; fid: never[]; cls: never[]; ttfb: never[]; load: never[]; all: never[]; }'.
  No index signature with a parameter of type 'string' was found on type '{ fcp: never[]; lcp: never[]; fid: never[]; cls: never[]; ttfb: never[]; load: never[]; all: never[]; }'. 
    if (index !== -1) {
      callbacks[metricName].splice(index, 1);
    }


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:259:10
Error: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{}'.
  No index signature with a parameter of type 'string' was found on type '{}'. 
export function getMetric(metricName) {
  return metrics[metricName];
}


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:294:10
Error: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ fcp: { good: number; poor: number; }; lcp: { good: number; poor: number; }; fid: { good: number; poor: number; }; cls: { good: number; poor: number; }; ttfb: { good: number; poor: number; }; load: { good: number; poor: number; }; }'.
  No index signature with a parameter of type 'string' was found on type '{ fcp: { good: number; poor: number; }; lcp: { good: number; poor: number; }; fid: { good: number; poor: number; }; cls: { good: number; poor: number; }; ttfb: { good: number; poor: number; }; load: { good: number; poor: number; }; }'. 
  for (const [name, value] of Object.entries(metrics)) {
    if (!thresholds[name]) continue;
    


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:299:18
Error: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ fcp: { good: number; poor: number; }; lcp: { good: number; poor: number; }; fid: { good: number; poor: number; }; cls: { good: number; poor: number; }; ttfb: { good: number; poor: number; }; load: { good: number; poor: number; }; }'.
  No index signature with a parameter of type 'string' was found on type '{ fcp: { good: number; poor: number; }; lcp: { good: number; poor: number; }; fid: { good: number; poor: number; }; cls: { good: number; poor: number; }; ttfb: { good: number; poor: number; }; load: { good: number; poor: number; }; }'. 
    
    if (value <= thresholds[name].good) {
      score = 1;


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:302:25
Error: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ fcp: { good: number; poor: number; }; lcp: { good: number; poor: number; }; fid: { good: number; poor: number; }; cls: { good: number; poor: number; }; ttfb: { good: number; poor: number; }; load: { good: number; poor: number; }; }'.
  No index signature with a parameter of type 'string' was found on type '{ fcp: { good: number; poor: number; }; lcp: { good: number; poor: number; }; fid: { good: number; poor: number; }; cls: { good: number; poor: number; }; ttfb: { good: number; poor: number; }; load: { good: number; poor: number; }; }'. 
      rating = 'good';
    } else if (value <= thresholds[name].poor) {
      score = 0.5;


/home/scott/Projects/scotia-performance-dev/src/lib/utils/performanceMonitor.js:310:5
Error: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{}'.
  No index signature with a parameter of type 'string' was found on type '{}'. 
    
    ratings[name] = { value, rating, score };
    totalScore += score;


/home/scott/Projects/scotia-performance-dev/src/lib/components/ResponsiveImage.svelte:65:29
Error: Property 'length' does not exist on type '{}'. (ts)
  {#if isVisible || eager || loading === 'eager'}
    {#if sources && sources.length > 0}
      <picture>


/home/scott/Projects/scotia-performance-dev/src/lib/components/ResponsiveImage.svelte:67:16
Error: Argument of type '{}' is not assignable to parameter of type 'ArrayLike<unknown> | Iterable<unknown>'. (ts)
      <picture>
        {#each sources as source}
          <source srcset={source.srcset} type={source.type} sizes={source.sizes || undefined} />


/home/scott/Projects/scotia-performance-dev/src/lib/components/ResponsiveImage.svelte:68:27
Error: 'source' is of type 'unknown'. (ts)
        {#each sources as source}
          <source srcset={source.srcset} type={source.type} sizes={source.sizes || undefined} />
        {/each}


/home/scott/Projects/scotia-performance-dev/src/lib/components/ResponsiveImage.svelte:68:48
Error: 'source' is of type 'unknown'. (ts)
        {#each sources as source}
          <source srcset={source.srcset} type={source.type} sizes={source.sizes || undefined} />
        {/each}


/home/scott/Projects/scotia-performance-dev/src/lib/components/ResponsiveImage.svelte:68:68
Error: 'source' is of type 'unknown'. (ts)
        {#each sources as source}
          <source srcset={source.srcset} type={source.type} sizes={source.sizes || undefined} />
        {/each}


/home/scott/Projects/scotia-performance-dev/src/routes/+layout.svelte:24:12
Error: 'interface' declarations can only be used in TypeScript files. (js)
	// Props for Svelte 5 snippet pattern - use interface for better type safety
	interface Props {
		children: import('svelte').Snippet;


/home/scott/Projects/scotia-performance-dev/src/routes/+layout.svelte:28:20
Error: Type annotations can only be used in TypeScript files. (js)
	
	let { children }: Props = $props();
	


/home/scott/Projects/scotia-performance-dev/src/routes/+layout.svelte:102:23
Error: Type annotations can only be used in TypeScript files. (js)
			// Add scroll event listener for debugging
			let scrollTimeout: ReturnType<typeof setTimeout>;
			


/home/scott/Projects/scotia-performance-dev/src/routes/location/+page.svelte:354:10
Warn: Unused CSS selector ".btn-secondary"
https://svelte.dev/e/css_unused_selector (svelte)
  
  <style>
    /* Main Container */


====================================
svelte-check found 104 errors and 1 warning in 7 files
